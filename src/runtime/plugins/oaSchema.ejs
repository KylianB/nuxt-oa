import { defineNuxtPlugin } from '#imports'
import schema from <%= `"${options.schemasFolderPath}/${options.modelName}.json"` %>

schema.type = 'object'
delete schema.encryptedProperties
delete schema.trackedProperties
delete schema.timestamps
delete schema.userstamps

// remove writeOnly props
if (!schema.writeOnly) {
  const stack = []
  const addToStack = parent => Object.entries(parent).forEach(([key, el]) =>
    (el && typeof el === 'object') ? stack.push({ key, parent, el }) : 0)
  addToStack(schema)
  while(stack.length) {
    const { parent, key, el } = stack.pop()
    if (el.writeOnly) {
      delete parent[key]
    } else {
      addToStack(el)
    }
  }
}

export default defineNuxtPlugin((nuxtApp) => {
  return {
    provide: {
      get<%- options.modelName %>OaSchema: schema.writeOnly ? {} : schema
    }
  }
})

type <%- options.modelName %>OaSchema = Omit<typeof schema, 'encryptedProperties'|'trackedProperties'|'timestamps'|'userstamps'>
declare module '#app' {
  interface NuxtApp {
    $get<%- options.modelName %>OaSchema: <%- options.modelName %>OaSchema
  }
}

declare module 'vue' {
  interface ComponentCustomProperties {
    $get<%- options.modelName %>OaSchema: <%- options.modelName %>OaSchema
  }
}
