type Schema = Record<string, any>
type Stack = [Schema, string][]

const capFirst = (str: string) => str[0].toUpperCase() + str.slice(1)

function simpliestType (schema: Schema, interfaceName: string, stack: Stack): string {
  if (schema.$ref) {
    return 'Oa' + capFirst(schema.$ref.split('/').pop())
  }
  if (schema.properties || schema.enum || schema.anyOf || schema.oneOf || schema.not) {
    stack.push([schema, interfaceName])
    return interfaceName
  }
  return schema.type ?? 'any'
}

function genInterface (schema: Schema, interfaceName: string, stack: Stack): string {
  let str = `\ninterface ${interfaceName} {\n`

  for (const propName in schema.properties) {
    const propSchema = schema.properties[propName]
    if (propSchema.description) {
      str += `  /**${['', ...propSchema.description.trim().split('\n')].join('\n   * ')}\n   */\n`
    }
    str += `  ${propSchema.readOnly ? 'readonly ' : ''}${propName}${schema.required && schema.required.includes(propName) ? '' : '?'}: `

    const propInterfaceName = `${interfaceName}${capFirst(propName)}`
    if (propSchema.type === 'array') {
      const itemInterfaceName = `${propInterfaceName}Item`
      if (Array.isArray(propSchema.items)) {
        const items = propSchema.items
          .map((item: Schema, i: number) => simpliestType(item, itemInterfaceName + i, stack))
        str += `[${items.join(', ')}]`
      } else if (typeof propSchema.items === 'object') {
        str += `${simpliestType(propSchema.items, itemInterfaceName, stack)}[]`
      }
    } else {
      str += simpliestType(propSchema, propInterfaceName, stack)
    }
    str += '\n'
  }
  return str + '}\n'
}

function genType (schema: Schema, interfaceName: string, stack: Stack) {
  let str = `type ${interfaceName} = `
  if (schema.enum) {
    str += schema.enum.map((v: any) => `'${v}'`).join(' | ')
  } else {
    str += schema.type ?? 'any'
  }
  if (schema.anyOf) {
    const anyOf = []
    for (const anyOfSchema of schema.anyOf) {
      const propertyInterfaceName = `${interfaceName}${capFirst(anyOfSchema.title) || 'Unknown'}AnyOf`
      stack.push([anyOfSchema, propertyInterfaceName])
      anyOf.push(propertyInterfaceName)
    }
    str += anyOf.join('& ')
  }
  if (schema.oneOf) {
    const oneOf = []
    for (const oneOfSchema of schema.oneOf) {
      const propertyInterfaceName = `${interfaceName}${capFirst(oneOfSchema.title) || 'Unknown'}OneOf`
      stack.push([oneOfSchema, propertyInterfaceName])
      oneOf.push(propertyInterfaceName)
    }
    str += oneOf.join('| ')
  }
  if (schema.not) {
    const propertyInterfaceName = `${interfaceName}Not`
    stack.push([schema.not, propertyInterfaceName])
    str += `  & { [key: string]: ${propertyInterfaceName} }`
  }
  return str
}

function genTypes (schema: Schema, interfaceName: string) {
  const stack: Stack = [[schema, interfaceName]]

  const types = []
  while (stack.length) {
    const [schema, interfaceName] = stack.shift()!

    if (schema.properties) {
      types.push(genInterface(schema, interfaceName, stack))
    } else {
      types.push(genType(schema, interfaceName, stack))
    }
  }

  return types.join('\n')
}

export default function typeGenerator (schemasByName: Schema): string {
  const allTypes = ['// Generated by nuxt-oa']
  for (const modelName in schemasByName) {
    const typeName = `Oa${modelName}`
    const schema = schemasByName[modelName]

    const tStr = { type: 'string' }
    schema.properties.id = tStr
    if (!schema.properties.required) { schema.properties.required = [] }
    schema.properties.required.push('id')

    if (schema.timestamps) {
      const timestamps = typeof schema.timestamps === 'object'
        ? schema.timestamps
        : (!schema.timestamps ? {} : { createdAt: tStr, updatedAt: tStr, deletedAt: tStr })
      schema.properties = { ...schema.properties, ...timestamps }
      delete schema.timestamps
    }

    if (schema.userstamps) {
      const userstamps = typeof schema.userstamps === 'object'
        ? schema.userstamps
        : (!schema.userstamps ? {} : { createdBy: tStr, updatedBy: tStr, deletedBy: tStr })
      schema.properties = { ...schema.properties, ...userstamps }
      delete schema.userstamps
    }
    const trackedProps = schema.trackedProperties?.map((prop: string) => `'${prop}'`).join(' | ')
    if (trackedProps) {
      schema.properties.updatedAt = tStr
      schema.properties.updates = {
        description: 'Keeps track of some updated properties',
        type: `Pick<${typeName}, ${trackedProps} | 'updatedAt'>[]`
      }
      delete schema.trackedProperties
    }
    delete schema.encryptedProperties

    allTypes.push(genTypes(schema, typeName))
  }
  return allTypes.join('\n\n')
}
